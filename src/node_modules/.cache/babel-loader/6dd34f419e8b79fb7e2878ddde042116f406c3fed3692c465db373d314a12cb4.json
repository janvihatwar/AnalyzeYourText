{"ast":null,"code":"var _jsxFileName = \"D:\\\\IMP_PERSONAL_PROJECTS\\\\React Projects\\\\firsttry\\\\src\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Body from './components/Body';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  {/*alert is earlier set as null */}\n  const showAlert = (message, type) => {\n    {/* will take iinput of message and type of alert*/}\n    setAlert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1400);\n  };\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = 'rgb(2 56 98)';\n      showAlert(\"Dark mode has been enabled!!\", \"success\");\n      {/*passing msg and type to the function */}\n      // document.title=\"TextAnalyzer-Dark Mode\";           {/*for changing the doument title according to title */}\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled!!\", \"success\");\n      // document.title=\"TextAnalyzer-Light Mode\";        \n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"Text Analyzer\",\n      mode: mode,\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(Body, {\n        showAlert: showAlert,\n        mode: mode,\n        toggleMode: toggleMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"QWu0QpbEF50KcvttgEfF5q8xP20=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Body","Navbar","Alert","React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setMode","alert","setAlert","showAlert","message","type","msg","setTimeout","toggleMode","document","body","style","backgroundColor","children","title","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/IMP_PERSONAL_PROJECTS/React Projects/firsttry/src/src/App.js"],"sourcesContent":["import './App.css';\nimport Body from './components/Body';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert'\nimport React,{useState} from 'react';\n\n\nfunction App() {\n  const[mode,setMode]=useState('light');\n  const[alert,setAlert]=useState(null);  {/*alert is earlier set as null */}\n\n  const showAlert=(message,type)=>{   {/* will take iinput of message and type of alert*/}\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1400);\n  \n  }\n  const toggleMode=()=>{\n    if(mode==='light') \n    {\n      setMode('dark');\n      document.body.style.backgroundColor='rgb(2 56 98)';\n      showAlert(\"Dark mode has been enabled!!\",\"success\");   {/*passing msg and type to the function */}\n      // document.title=\"TextAnalyzer-Dark Mode\";           {/*for changing the doument title according to title */}\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor='white';\n      showAlert(\"Light mode has been enabled!!\",\"success\");\n      // document.title=\"TextAnalyzer-Light Mode\";        \n    }\n\n  }\n  return (\n    <>\n\n   <Navbar title=\"Text Analyzer\" mode={mode} toggleMode={toggleMode}/>  {/*we are given title here bcz we can update title anytime  */}\n   <Alert alert={alert}/>\n   \n   <div className=\"container\">\n   <Body showAlert={showAlert} mode={mode} toggleMode={toggleMode}  />\n   </div>\n  \n   \n  \n\n\n   \n   \n  </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAGrC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAK,CAACC,IAAI,EAACC,OAAO,CAAC,GAACR,QAAQ,CAAC,OAAO,CAAC;EACrC,MAAK,CAACS,KAAK,EAACC,QAAQ,CAAC,GAACV,QAAQ,CAAC,IAAI,CAAC;EAAG,CAAC;EAExC,MAAMW,SAAS,GAACA,CAACC,OAAO,EAACC,IAAI,KAAG;IAAI,CAAC;IACnCH,QAAQ,CAAC;MACPI,GAAG,EAACF,OAAO;MACXC,IAAI,EAACA;IACP,CAAC,CAAC;IACFE,UAAU,CAAC,MAAM;MACfL,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,EAAE,IAAI,CAAC;EAEV,CAAC;EACD,MAAMM,UAAU,GAACA,CAAA,KAAI;IACnB,IAAGT,IAAI,KAAG,OAAO,EACjB;MACEC,OAAO,CAAC,MAAM,CAAC;MACfS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,cAAc;MAClDT,SAAS,CAAC,8BAA8B,EAAC,SAAS,CAAC;MAAI,CAAC;MACxD;IACF,CAAC,MACG;MACFH,OAAO,CAAC,OAAO,CAAC;MAChBS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,OAAO;MAC3CT,SAAS,CAAC,+BAA+B,EAAC,SAAS,CAAC;MACpD;IACF;EAEF,CAAC;EACD,oBACET,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBAEDnB,OAAA,CAACL,MAAM;MAACyB,KAAK,EAAC,eAAe;MAACf,IAAI,EAAEA,IAAK;MAACS,UAAU,EAAEA;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,MAAE,eACrExB,OAAA,CAACJ,KAAK;MAACW,KAAK,EAAEA;IAAM;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAEtBxB,OAAA;MAAKyB,SAAS,EAAC,WAAW;MAAAN,QAAA,eAC1BnB,OAAA,CAACN,IAAI;QAACe,SAAS,EAAEA,SAAU;QAACJ,IAAI,EAAEA,IAAK;QAACS,UAAU,EAAEA;MAAW;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAAA,eAQL,CAAC;AAEL;AAACpB,EAAA,CAhDQD,GAAG;AAAAuB,EAAA,GAAHvB,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}